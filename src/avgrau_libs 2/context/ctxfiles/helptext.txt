-m PROPERTIES ► TIMING ► BURST ► MESSAGES ► ID ► OTHER ► SHORTCUTS;
-m TIMING ▪ DELAY MODE ► RANDOM OPTIONS ► POSITION OPTIONS ► CALCULATION ► MORE ☺ HELP;
-m BURST ► QUANTITY ► SELECTION ▪ AUTO ADVANCE ► PRESETS ► MORE ☺ HELP;
-m MESSAGES ► X-AXIS ► Y-AXIS ► VARIABLES ► ON/OFF ** ☺ HELP;
-m ID ▲ ID NUMBER ▲ TAGS ▲ CLEAR TAGS ▲ COLOUR ▲ RECEIVE ☺ HELP;
-m OTHER ► RULES ► BANK ► STATE ► SEND SETTINGS TO ► MORE ☺ HELP;
-h SHORTCUTS;
-t MODE E 3 normal random positional;
-m RANDOM ▲ RESOLUTION ▲ MINIMUM ▪ AUTO ADVANCE ** ** ☺ HELP;
-m POSITION ▲ RESOLUTION ▲ SCALE ** ** ** ☺ HELP;
-m CALCULATION ▪ CALCULATION MODE ▲ FACTOR ▪ MAP LIST ▪ TEMPO ** ☺ HELP;
-m TIMING2 ▲ SHUFFLE ▲ SAFETY LIMIT ▲ SAFETY TRIGGER ** ** ☺ HELP;
-p list MODE :: \; Delay mode determines the length of the Context cycle‚ ie. how long it takes for the cursor to scroll across the canvas. \; RANDOM mode selects a random cycle time each time the Context is started. \; POSITIONAL mode allows the delay time to be set by the Context's position on the canvas. Move the Context and the delay time will change. The time value is a scalar set radially from an origin point. The origin point is either the last Context (if it also has positional mode on) or the origin point of the canvas. \; RANDOM AND POSITION OPTIONS offer some settings for the corresponding modes. \; CALCULATION lets you establish how the :d value correspond to the cycle time‚ ie. by defining a multiplier.;
-m QUANTITY ▲ DEFINE ▲ PROGRESSION ▲ RANDOM ▪ WRAP ▪ EDIT RANDOM ☺ HELP;
-m SELECTION ▲ DEFINE ▲ PROGRESSION ▲ RANDOM ▪ WRAP  ▪ EDIT RANDOM ☺ HELP;
-t ADVANCE m 2 off on;
-m BURST PRESETS ▪ ALL ▪ LINEAR ▪ RANDOM ** ** ☺ HELP;
-m BURST MORE ▪ STRUCTURE MODE ▪ BURST MODE ** ** ** ☺ HELP;
-p list BURST :: \; The burst toggles (by default the ones on the right) fire together at the end of the Context cycle. The QUANTITY settings define how many toggles fire and the SELECTION settings define which. \; AUTO ADVANCE decides whether a new set of burst toggles are chosen every time the context is started or not. Use the "bump" command to advance a new toggle selection regardless of whether auto-advance is on. \; PRESETS allow you to choose the most common burst settings. \; MORE lets you set STRUCTURE MODE and BURST MODE;
-m X-AXIS MESSAGES ▲ LIMIT ▲ PREPEND ▲ APPEND ▪ EDIT ▪ CLEAR ☺ HELP;
-m Y-AXIS MESSAGES ▲ LIMIT ▲ PREPEND ▲ APPEND ▪ EDIT ▪ CLEAR ☺ HELP;
-m VARIABLE OPTIONS ▪ ? ADVANCE ▲ ? OFFSET ▪ ^ RANDOM ► DEFINITIONS ▪ < PREPEND ☺ HELP;
-m ON/OFF ▪ MESSAGE ON/OFF ▪ START ON/OFF ** ** ** ☺ HELP;
;
-p list MESSAGES :: \; Each time a toggle fires‚ context sends a message. The messages are stored in two databases‚ one for the x-axis (:a) and one for the y-axis (:b). Each toggle corresponds to one term of the database‚ so there are as many toggles on the context as there are terms in the database. Note that the END toggle (bottom right) corresponds to the BURST database (default y)‚ not the PATTERN. \; This sub menu helps you edit the databases‚ and controls how the databases are read. \; VARIABLES are special characters which are placed into a database message and substituted for custom values. This sub-menu delivers help on all special characters. \; VARIABLES contains settings and more help on message variables. \; ON/OFF lets you turn Context input and output on or off.;
-f ID id - -;
-s TAGS n 0 1;
-c CLEAR-TAGS :n -clear;
-f COLOUR c - -;
-s RECEIVE ln 0 0;
-p list ID :: \; ID numbers and tags are useful for getting information in and out of Context. \; ID NUMBER is a unique number for every Context. They are assigned automatically and it generally advisable to let them take care of themselves‚ but it is possible to define them manually as well. If two contexts share the same ID number‚ the network might start to behave strangely. \; TAGS are arbitrary names that you assign to a Context for creating groups. Type in a new tag to add one and an existing tag to remove it. One Context can have any number of tags and one tag can be shared between any number of Contexts. \; A Context will receive commands through all of its ID (number and tags). If its number is "2" and the tag includes "drums" then this Context will receive data sent to [send c2] and [send drums]. While playing‚ a Context will send its sequenced messages to the same channels‚ but with a dash ("-") on the end. So you could receive messages set from the same context with [receive c2-] and [receive drums-] \; WARNING: Creating and removing tags will generally cause audio glitches‚ so it is best not to play with them live. \; RECEIVE sets a single receive channel ie. "c1-". This is useful for linking one Context to another without using tags (which cause audio glitches). An optional argument "-" before the symbol means that Context will automatically start when it receives input through this channel.;
-m RULES ▪ ON-OFF ▪ EDIT LIST ▪ SAVE ▪ CLEAR ** ☺ HELP;
-m BANK ▪ AUTO UPDATE ▪ SAVE NOW ▪ EDIT LIST ▪ CLEAR ** ☺ HELP;
-m STATE ▪ AUTO SAVE ▪ AUTO PRINT ▪ PRINT STATE ▪ EDIT LIST ▪ INPUT LABEL ☺ HELP;
-m SETTINGS TO ▪ THIS CONTEXT ▪ ALL CONTEXTS ▪ OUTLETS ▪ CUSTOM ** ☺ HELP;
-m MORE2 ► OVERLAY ► CYCLE REVERSAL ► MISCELLANEOUS ► TOGGLES ** ☺ HELP;
-p list RULES : This lets you set up custom rules for how Context operates. \; BANK : These settings control the context-state bank saving. \; STATE : These settings let you view and control how the context state is saved. \; SETTINGS TO : This determines which context(s) the settings in this menu will send to.;
-l SHORTCUT-1 1;
-l SHORTCUT-2 2;
-l SHORTCUT-3 3;
-l SHORTCUT-4 4;
-l SHORTCUT-5 5;
-l SHORTCUT-6 6;
;
;
;
;
;
;
-f RANDOM RESOLUTION D -1064 1064;
-f RANDOM MIMIMUM q 0 1064;
-t RANDOM ADVANCE Q 2 off on;
;
;
-p list RANDOM RESOLUTION Determines the fractions allowed in random timings. 0.5 means that timings are allowed in 1/2 second intervals‚ 3 allows 3 second intervals‚ etc. \; MINIMUM sets the minimum value allowed by in random cycle timing. \; AUTO ADVANCE determines whether random timings (:E 1) advances every cycle or not. Use 'bump d' for a custom advance.;
-f POSITION RESOLUTION B 0 1064;
-f POSITION SCALE C 0 1064;
;
;
;
-p list POSITION RESOLUTION determines the fractions allowed in positional timings. \; POSITIONAL SCALE determines how fast the unit changes as the Context is dragged across the screen.;
-t CALCULATION MODE K 5 off * / ^ map;
-f CALCULATION k 0 1064;
-s CALCULATION MAP k 1 0;
-f TEMPO te 0 1064;
;
-p list CALCULATION :: \; By default‚ the :d value (ie. the number in the float attom in the top-left corner) defines the cycle time exactly‚ so :d 1 means 1 second‚ :d 2 meaning 2 seconds‚ etc. Calculation lets you establish rules to create custom timing sets. All rules are defined by the MODE (:K) and the factor (:k). \; * mode means :k * :d \; / mode means :k / :d \; ^ mode means :k ^ :d \; map mode lets you enter a custom list of values as :k‚ so that :d0 = :k0‚ :d1 = :k1‚ etc. Use MAP LIST to enter the list. \; TEMPO multiplies the given time by a percentage (default 100). This is effectively the same as :K 1‚ but allows for global tempo changes after :K 1 has already been set. ;
-f SHUFFLE O -100 100;
-f SAFETY LIMIT z 0 10000;
-s SAFETY TRIGGER ze 1 0;
;
;
-p list SHUFFLE adds a shuffle to the pattern output. The range is -100 to 100. Positive numbers bring every alternate beat forward while negative numbers push it back‚ with 0 meaning off. \; SAFETY LIMIT: The safety setting helps to avoid stack overflows. It specifies a time duration (default 10ms) below which Context cann't be restarted. Any message received by context will block further input for this amount of time. This is effective at preventing feedback loops‚ but also hinders some functionality. Turn this feature off if you want to play fast‚ but do so at your own risk. \; SAFETY TRIGGER: An event can be triggered when the safety function cuts a feedback loop. This event is defined by the :ze command. :ze stores any message‚ which will be sent in case the safety function kicks in. Using the "." prefix‚ you can use :ze to have Context execute a command on itself. The most obvious case is " . :d 1 "‚  which resets the cycle time to 1 second.;
-g 79;
;
;
;
;
;
-f HOW MANY h #q 0 0;
-f PROGRESSION p #q 0 -1;
-f H RANDOM l 0 101;
-t WRAP w 2 off on;
-c EDIT RANDOM :l -open;
-p list QUANTITY :: \; These settings allow you to choose how many open toggles will fire at the end of every Context cycle. \; DEFINE defines an exact number of toggles. \; PROGRESSION adds n number of toggles each cycle. \; RANDOM adds a degree of uncertainty to the sum. 0 defines no uncertainty while 100 defines even distribution (chaos). Numbers in between define varying degrees of probability. 101 defines even distribution through an urn (non repeating random). "bump a" resets the urn. \; WRAP determines whether the random variations can wrap from the top to the bottom‚ ie. whether the number of toggles can go from 1 to the highest number in one step. \; EDIT RANDOM gives an editable array which you can use to set custom probability distributions. Unfortunately‚ edits made here are unsavable.;
-s WHICH o 1 0;
-f PROGRESSION P #q 0 -1;
-f W RANDOM R 0 101;
-t WRAP W 2 off on;
-c EDIT RANDOM :R -open;
-p list SELECTION :: \; These settings allow you to choose which toggles wire fire‚ given that the quantity has been determined (see QUANTITY). \; DEFINE allows you to define an exact set of toggles by typing it in as a list. (Note that this overwrites the "define how many" setting from the QUANTITY menu). \; PROGRESSION adds n number of leaps to each cycle. \; RANDOM adds a degree of uncertainty to the sum. 0 defines no uncertainty while 100 defines even distribution (chaos). Numbers in between define varying degrees of probability. 101 defines even distribution through an urn (non repeating random). "bump a" resets the urn. \; WRAP determines whether the random variations can jump from the top to the bottom of the burst in one step. \; EDIT RANDOM gives an editable array which you can use to set custom probability distributions. Unfortunately‚ edits made here are unsavable.;
;
;
;
;
;
;
-c ALL :L all;
-c LINEAR :L linear;
-c RANDOM :L random;
;
;
-p list ALL means that all selected burst toggles will fire each cycle. \; LINEAR means that one toggle will fire each cycle--specifically the next one. \; RANDOM means that one random toggle will fire each cycle. \; Note that you can add more of your own presets to this list by editing 'burst-presets.txt'.;
-t STRUCTURE pu 2 off on;
-t BURST MODE bs 2 off on;
;
;
;
-p list STRUCTURE MODE allows Context to receive a "push" message for creating a structured hierarchy. \; BURST MODE allows you to set a different way for the Burst to function. When set to 1‚ the Burst will not fire at the end of the cycle‚ but instead will fire on every single Pattern toggle.;
;
;
;
;
;
;
-f X LIMIT e #p 1 1;
-s X PREPEND S 1 0;
-s X APPEND T 1 0;
-c X EDIT :a -open;
-c X CLEAR :a -clear;
-p list LIMIT determines the limit to which terms in the message database are read when the toggles fire. If the limit is
 equal to the number of toggles‚ then each toggle will send its own message corresponding to a term of the database. If the limit is less than the number of toggles then excess toggles will repeat the last term. If the limit is 1 then only the first message in the bank is ever read. \; PREPEND adds custom text to the beginning of every message. \; APPEND adds custom text to the end of every message.;
-f Y LIMIT f #q 1 1;
-s Y PREPEND U 1 0;
-s Y APPEND V 1 0;
-c Y EDIT :b -open;
-c Y CLEAR :b -clear;
-g 120;
-t ? ADVANCE rm 2 off on;
-f ? OFFSET ro -1064 1064;
-t ^ RANDOM nr 2 off on;
-m DEFINITIONS ☺ ARITHMETIC ☺ NO ARGUMENTS ☺ WITH ARGUMENTS ☺ DIRECTORS ** ☺ HELP;
-t > PREPEND ms 2 off on;
-p list ? ADVANCE determines whether the ? message variable chooses a new random value each time it is sent. When off‚ the 'bump m' command will select a new value. \; ? OFFSET adds  given number to all ? message variables. \; ^ RANDOM determines whether the ^ variable picks a random ID number or cycles through them in sequence. \; DEFINITIONS lists a series of help prompts for message variables. \; < PREPEND determines whether or not the dollar zero value is prepended to the message send prefix <.;
-t MESSAGE me 2 off on;
-t START on 2 off on;
;
;
;
-p list MESSAGE ON/OFF mutes the message output of a Context (:me 0). \; START ON/OFF prevents Context from starting (:on 0).;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
-t RULES ON OFF I 2 off on;
-c RULES LIST :I -open;
-c RULES SAVE :I -save;
-c RULES CLEAR :I -clear;
;
-p list RULES: You can set up conditional rules to control the Context state. An example of a conditional rule would be‚ "if the cycle time is more than 4‚ open the :x 1 toggle". Rules come in two lines and follow an important syntax: \; The first line describes the condition. It starts with a command (ie. ' :x ')‚ followed by the optional operator ' ] '‚ which queries the list length rather than the list (ie. ' 10 20 30 ' becomes '3'. The next term is a query (detailed below). \; The second line describes the consequence. It must start with a double-hyphen ' -- ' and can contain any command (ie. ' :y 3 '). \; Valid queries are: \; q<  : less than \; q> : greater than \; q<= : less than or equal to \; q>= : greater than or equal to \; q== : equals \; q= : contains (this is the default if no query is given). \; Both the condition and the consequence can include variables from the output language‚ ie. ' ? ' for random numbers. ;
-t BANK AUTO UPDATE A 2 off on;
-c BANK SAVE :A -save;
-c BANK OPEN :A -open;
-c BANK CLEAR :A -clear;
;
-p list STATE BANK :: \; The preset bank enables you to quickly and conveniently switch between different setting presets. By default the bank tracks the settings :x :y :i :j and :d‚ although this list can be changed to include any of settings (see below). The settings in this menu determine how the preset bank is saved in the patch. \; The preset bank is accessed through the main GUI face (ie. when this menu is switched off). Hold the mouse over a context then double press and hold the Shift key. The Y-axis toggles will turn into a selector‚ with each number representing one slot of the bank. Selecting a new number will instantly load all of its settings‚ and all subsequent settings will be saved to that slot. \; AUTO UPDATE If auto-update is on then any changes made to the bank will automatically be saved loaded into the current preset bank. If it is off‚ then the settings in the preset bank will not alter automatically. \; SAVE NOW saves the bank storage to the patch now (for use when auto-save is turned off). \; VIEW LIST lets you view and edit the bank storage. \; CLEAR clears the bank storage.;
-t AUTO SAVE v 2 off on;
-t AUTO PRINT pr 3 off output state;
-c PRINT STATE print;
-c SAVE LIST savelist;
-t INPUT LABEL il 3 off temp permanent;
-p list AUTO SAVE decides whether the Context state saves into the patch on Ctrl+s. You might want to turn this off if you don't want Context to change. \; AUTO PRINT selects what (if any) data prints to the console. 1 means that all sequenced messages will print as they fire. 2 prints messages as well as all changes to the Context state. 0 (default) prints nothing. \; PRINT STATE prints the entire context state to the consol now. \; SAVE LIST lets you view and edit the context saving list. \; INPUT LABEL turns on a label which displays all valid incoming commands.;
-c SETTINGS TO THIS :se 0;
-c SETTINGS TO ALL :se 1;
-c SETTINGS TO OUTLETS :se 2;
-c SETTINGS TO CUSTOM se 1 0;
;
-p list SETTINGS TO :: \; This dialogue determines which context(s) the settings from this menu are sent to. \; THIS CONTEXT‚ the default setting‚ means that the settings you choose will only affect this context‚ as you would expect. \; ALL CONTEXTS means that the settings you choose will affect all open contexts‚ turning this context into a global menu. \; OUTLETS means that the settings are sent only to this context's outlets. \; CUSTOM allows you to choose custom sets. Type a context number (ie "c12") or a tag (ie. "drums") and this menu will affect those contexts only. \; Watch out--global settings can be confusing and you can end up making a lot of undesired changes if you are not careful. Holding the Control key will bypass this setting and ensure that all menu commands are sent to this context.;
-m OVERLAY ▪ SAVE OVERLAY ▪ VIEW OVERLAY ▪ CLEAR OVERLAY ▪ EMBEDDED ▪ EMBED STOP ☺ HELP;
-m REVERSE ▪ OFFSET PATTERN ▪ REVERSE LAST ** ** ** ☺ HELP;
-m MISC ▪ INTERRUPTION ▪ GUI OFF ▪ FLOAT SEND ▪ FLOAT SEND CUSTOM ▪ SWITCH ☺ HELP;
-m TOGGLES ▪ FORCE X ▪ FORCE Y ▪ LEGACY ** ** ☺ HELP;
;
-p list OVERLAY determine some settings for the context overlay (embedding environment). \; CYCLE REVERSAL displays settings concerned with the behaviour of pattern toggles when the cycle time is reversed. \; TOGGLES lets you set that only one toggle on the x- or y- axis will ever be open.; 
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
-p list + - * and / work as arithmetic characters to modify numbers‚ but only when they are surrounded by brackets. Brackets work as you would expect them to‚ so ( 3( 2 - (5-2) )) would evaluate to -1.;
-p list _ substitutes the number of the toggle \; = substitutes the toggle float \; ¬ substitutes the distance between this toggle and the next \; @ substitutes Context's position on the canvas \; $ substitutes a custom variable as defined by the :$ input command.;
-p list ^ substitutes a Context ID number‚ given a tag. ARGUMENT: one tag. \; > fetches terms from the Context state. ARGUMENTS: ID number (optional)‚ command without colon (mandatory)‚ line number (optional)‚ term number (optional). \; ! substitutes a value from the last Context that started this one. ARGUMENT: one symbol from the last message. \; % substitutes a value from the last toggle that fired on this Context. ARGUMENT: one symbol from the last message. \; ? substitutes a random number. ARGUMENTS: maximum‚ length of array (optional) \; [[hash]] substitutes a number for a note on a scale using the [scaler] object. \; [ ] manipulate a list. ARGUMENTS: one float goes before‚ anything goes inside. A positive first argument chooses an item from the list. A negative argument removes that item from the list. A zero counts the list. \; ` ` (grave accents) substitutes a custom operation‚ as defined in the Overlay patch. ARGUMENTS: anything‚ inside. \; ~ takes a snapshot of an embedded Content array. ARGUMENT: array name (optional).;
-p list ( ) direct order of operations in a list \; < directs the message to a specified send channel. \; << directs the message to a specified send channel and cancels its normal send channel. \; <o sends the message to the Context outlets. \; & separates a message \; . directs a message towards this Context.;
;
-p list Context stores messages in its database‚ which are sent during the Context cycle. Those messages can contain variables which choose new values‚ for example a random number‚ or perform operations‚ such as addition. This menu contains a brief explanation of every message variable. ;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;

;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
-c OVERLAY SAVE :ol -save;
-c OVERLAY VIEW :ol -open;
-c OVERLAY CLEAR :ol -clear;
-t EMBEDDED ol 2 off on;
-t STOP es 2 now wait;
-p list SAVE OVERLAY saves the overlay patch to the creation argument. Note that the main patch still has to be saved in order for this to take affect. \; VIEW OVERLAY opens the overlay patch for editing. \; CLEAR OVERLAY clears the overlay saving (the overlay patch itself remains intact‚ but it won't be saved.) \; EMBEDDED changes the behaviour of context to suit embedded environmets. The line~ object is switched on and context resizing is optimized for embedding. This option is selected automatically as soon as the overlay is opened or written to‚ but it is possible to change it manually if you like‚ ie. because Context resizing becomes is too clunky. \; EMBED STOP This option only affects contexts that themselves have been embedded‚ not contexts which have things embedded in them. When context is embedded‚ it cycles continuously when it is triggered by the host context's cursor. This setting determines how the embedded context stops. With 'now'‚ context will hard stop once it is unselected by the cursor. 'Wait' means that it will wait until the end of its cycle to stop. ;
-t OFFSEST rd 2 off on;
-t REVERSE rt 2 off on;
;
;
;
-p list OFFSET PATTERN shifts the playback of the pattern array‚ only when the Context cycle is in reverse (ie. when the cycle time is negative). This is so that Context can play the mirror-image of a pattern. \; REVERSE LAST switches the first and last toggle‚ only when the context cycle is reversed. This means that self-looping contexts remain intact when the cycle is reversed.;
-t INTERRUPT t 2 off on;
-c GUI OFF :g -1;
-t FLOAT SEND J 3 local global overlay;
-s FLOAT SEND-C J 1 0;
-t SWITCH sw 2 off on;
-p list INTERRUPTION settings determine what happens when context is interrupted in the middle of its cycle. When on‚ context will restart. When off‚ Context will continue to the end of its cycle uninterrupted. \; GUI OFF turns the GUI face off and deletes a sizeable portion of the patch inside. Context continues to function as normal‚ but in "power saving" mode. Use this in larger patches when you know you won't have to manually edit a context and want to save CPU load. \; FLOAT SEND determines the domain of toggle float connections. Local means that toggle connects will only connect to other contexts in the same patch. Global means it will send to contexts in any open patch. Overlay means it will only send to Contexts embedded within this one. \; SWITCH sets the [switch~] object inside Context on for DSP processing. Usually [switch~] remains off while Context is idle‚ but you can turn it on using this setting if you want.;
-t FORCE X sx 2 off on;
-t FORCE Y sy 2 off on;
-t LEGACY le 2 off on;
;
;
-p list FORCE TOGGLES: If on‚ these settings force there to be only one toggle on in the x- or y- axis. \; LEGACY reproduces a (now fixed) error whereby the = variable fails to read the first toggle when the Context cycle is interrupted. It is reproduced here because it sometimes has unexpected musical effect.;
;
;
;
;
;
;
