# Edit this file to add your own presets. The first term in the list is the title which will be searched for (make sure that it doesn't match a command term ie "cycle"). The rest is the context save list. (The "print" command is helpful for retrieving the save list of a particular context).;



big :G 72 :F 120;

# create a Context with large boxes for improved clarity;



long :X 17 :Z 28;

# create a Context with pattern size of 17;



thru :H 6 :M 1 :z 0 3 #del 3 5 6 obj 18 -45 t b a 4 msg 18 -22 :s 5 obj 77 -42 list append 5 obj 46 -94 t f 5 connect 0 1 3 0 5 connect 1 1 6 0 5 connect 3 0 4 0 5 connect 3 1 5 1 5 connect 4 0 2 0 5 connect 5 0 2 1 5 connect 6 0 5 0;

# create a Context which relays whatever message it receives to its output;



full :x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 :y = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32;

# create a Context with all its toggles open;



xfull :x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32;

# create a Context with its x toggles open;



yfull :y = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32;

# create a Context with its y toggles open;



database :e 32 :f 32;

# create a Context with a high message limit (:e and :f);



tune :S # = :U # =;

create a Context primed with '# =' as a message prepend. This makes it easy to use the toggle floats for notes.;



sample-out :H 14 :X 9 :Y 6 :c 13 :d 1 :Z 14 :ol 1
12 obj 0 24 content :lo $$ :x2 1 :y1
0.4 :y2 1 6 obj 0 -30 ctx outlet~ 1 5 connect 3 0 4 0;

# create a Context with an embedded Content array and an outlet~;



sample :H 14 :X 9 :Y 6 :c 13 :d 1 :Z 14 :ol 1
12 obj 0 24 content :lo $$ :x2 1 :y1
0.4 :y2 1 5 obj 0 -30 throw~ samples 5 connect 3 0 4 0;

# create a Context with an embedded Content array and a throw object [throw samples~];



sample-move :H 14 :X 9 :Y 6 :c 13 :d 1 :Z 14 :ol 1
12 obj 0 24 content :lo $$ :x2 1 :y1
0.4 :y2 1 5 obj 0 -30 throw~ samples 4 obj 10 10 mover 5 connect 3 0 4 0;

# create a Context with an embedded Content array and a [mover] object;



rotate :y 1 :b ' . :u ';

# create a Context which automatically advances to the next bank term each cycle;



undo1 :H 4 :ol 1 4 obj 0 24 undo;

# create a Context with an embedded [undo] object;



undo2 :H 6 :Y 5 :ol 1 4 obj 0 24 undo 4 obj 0 36 undo;

# create a Context with two embedded [undo] objects;



undo3 :H 6 :Y 6 :ol 1 4 obj 0 24 undo 4 obj 0 36 undo 4 obj 0 48 undo;

# create a Context with three embedded [undo] objects;



undo4 :H 6 :Y 8 :ol 1 4 obj 0 24 undo 4 obj 0 36 undo 4 obj 0 48 undo 4 obj 0 60 undo;

# create a Context with four embedded [undo] objects;



selector :M 1 :L random :z 0;

# create a Context which functions as a random selector;



splitter :M 1 :z 0;

# create a Context which functions as a message multiplier;



bounce :d 1 :rd 1 :rt 1 :b ' | | | . :d * -1 :s ' :x 5;

# create a Context that will bounce back and forth at the end of each cycle;



structure :H 20 :M 1 :c -97673 :h 1 :m 0 :z 0 :P 1 :ol 1 :o 1 :pu 1 2 #del 8 5 obj 240 -32 route :d 6 obj 240 11 list prepend :o 6 obj 373 -13 list prepend :d 5 obj 373 -37 route next 5 connect 1 4 3 0 5 connect 1 6 6 0 5 connect 3 0 4 0 5 connect 3 1 2 4 5 connect 4 0 2 4 5 connect 5 0 2 0 5 connect 6 0 5 0;

# create a Context to build structured gates;



array :H 14 :X 9 :Y 6 :d 1 :c -835476 :Z 10 :ol 1 12 obj 0 25 content :x2 1 :y1 0.416667 :y2 1 :s2 0 18 obj 81 10 bng
15 250 50 0 empty empty empty 17 7 0 10 -262144 -1 -1 5 msg 108 -25
:ol -save 5 connect 4 0 5 0 5 connect 5 0 2 0;

# create a Context with a blank embedded array of 100 points;



freemessage :I 1 :ex ' 0 :x ] q== 1 || c* (> a (> x 1) (0)) ' :sx 1;

#create a Context which sends the contents of its :a database when you click on the corresponding toggle. This is mostly useful for sending custom messages in conjunction with [control]. BUG: you get a 0 on the end of the message.;



grain :H 18 :X -1 :d 0.1 :i 0 0 0 0 0.5 :c 19 :n grain :ol 1 16 obj 0 14 content :lo hanning :x2 0.1 :y1 0.0388889 :y2 0.0999999 :ed 0 :as 0 5 obj -1 254 throw~ granular 5 obj 15 204 tabread4~ sample 4 obj 0 226 *~ 5 obj 15 47 receive~ $1-myline 5 obj 42 156 receive pitch 5 obj 15 180 *~ 50 4 obj 15 94 +~ 4 obj 15 116 +~ 5 obj 42 94 route float 5 obj 30 70 receive~ offset 5 connect 1 5 12 0 5 connect 3 0 6 0 5 connect 5 0 6 1 5 connect 6 0 4 0 5 connect 7 0 10 0 5 connect 8 0 9 1 5 connect 9 0 5 0 5 connect 10 0 11 0 5 connect 11 0 9 0 5 connect 12 0 11 1 5 connect 13 0 10 1;

# create a Context which functions as a grain for granular synthesis (see helpfiles/granular).;



sample-filter :H 12 :X 9 :Y 12 :c 9 :d 3 :ol 1 16 obj 0 14 content :lo $$ :x2 3 :y1 0.55 :y2 1.63636 :ed 0 :as 0 5 obj 443 -89 throw~ samples 20 obj 0 59 content :H 14 :x2 3 :y1 1.63636 :y2 3 :c 20 :s1 6000 :s2 0 size 100 4 obj 397 -116 cyclone/svf~ 13 floatatom 70 0 4 0 0 0 - - - ¿ f 4 18 obj 57 1 bng 13 250 50 0 empty empty empty 17 7 0 10 -262144 -1 -1 5 msg 413 -51 :ol -save 5 connect 3 0 6 0 5 connect 5 0 6 1 5 connect 6 2 4 0 5 connect 7 0 6 2 5 connect 8 0 9 0 5 connect 9 0 2 0;

# create a Context which stores a sample and has another array to plot the line of a BP filter through that sample (throws to [catch~ samples]);

chord :H 6 :bs 1 :ol 1 2 #del 10 6 obj 395 18 bank y j 6 obj 372 -65 t a a 6 obj 372 -96
else/routeall count cursor-x 6 obj 399 -32 unpack s f 6 obj 454 -66 t a a 6 obj 481 -32 unpack s f 5 obj 456 -4 + 1 5 obj 456 47 mod 4 5 obj 456 77 + 1 5 obj 456 103 cyclone/prepend :u 5 obj 483 22 - 1 5 obj 483 22 - 1 5 obj 483 -4 route :X 5 connect 1 4 15 0 5 connect 1 6 5 0 5 connect 4 0 2 6 5 connect 4 1 6 0 5 connect 5 0 4 0 5 connect 5 1 7 0 5 connect 5 2 2 6 5 connect 6 1 9 0 5 connect 7 0 2 6 5 connect 7 1 8 0 5 connect 8 1 12 0 5 connect 9 0 10 0 5 connect 10 0 11 0 5 connect 11 0 12 0 5 connect 12 0 2 4 5 connect 13 0 10 1 5 connect 15 0 13 0;

#create a Context which stores a different set of burst toggles for every pattern toggle. This is ideal for building chords.;
